AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create two S3 buckets and other resources

Parameters:
  S3BucketData:
    Description: Name of the S3 bucket to store data
    Type: String
    Default: fmaric-academy-aws-cf-data

  S3BucketScripts:
    Description: Name of the S3 bucket to store scripts
    Type: String
    Default: fmaric-academy-aws-cf-scripts

  Owner:
    Description: Owner name
    Type: String
    Default: fmaric

  DynamoDBTableGlobalName:
    Description: Name of the DynamoDB table for global data
    Type: String
    Default: fmaric-academy-global-cloudf

  DynamoDBTableJobsName:
    Description: Name of the DynamoDB table for jobs
    Type: String
    Default: fmaric-academy-jobs-cloudf

  StateMachineName:
    Type: String
    Description: The name of the Step Function state machine
    Default: fmaric-academy-aws-statemachine-cf

  StateMachineRoleName:
    Type: String
    Description: The name of the IAM role for the state machine
    Default: StepFunctions-fmaric-academy-aws-statemachine-role-cf

  StateMachineTriggerRoleName:
    Type: String
    Description: The name of the IAM role for the state machine trigger
    Default: StepFunctions-fmaric-academy-aws-statemachine-triggerrole-cf

  LambdaLandingName:
    Type: String
    Description: The name of the Lambda function
    Default: fmaric-academy-lambda-cf

  LambdaLandingRoleName:
    Type: String
    Description: The name of the IAM role for the Lambda function
    Default: fmaric-academy-lambda-role-cf

  LambdaLandingUploadUNIXT:
    Type: String
    Description: A parameter to force Lambda deployment update
    Default: $(date +%s)

  SNSTopicName:
    Type: String
    Description: The name of the SNS topic
    Default: fmaric-academy-sns-lambda-cf

  GlueWorkflowName:
    Type: String
    Description: The name of the Glue workflow
    Default: fmaric-workflow-cf

  SNSTopicARN:
    Type: String
    Description: The ARN of the SNS topic
    Default: arn:aws:sns:eu-central-1:381492288052:fmaric-academy-sns-lambda-cf

  TopicRegion:
    Type: String
    Description: The region of the SNS topic
    Default: eu-central-1

  Email:
    Type: String
    Description: The e-mail address
    Default: fmaric77@gmail.com

Resources:
  AcademySNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Ref SNSTopicName
      
  LambdaLandingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref LambdaLandingRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject 
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketScripts}/*
                  - !Sub arn:aws:s3:::${S3BucketData}/*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableGlobalName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableJobsName}

  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref StateMachineRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StateMachinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - lambda:InvokeFunction
                  - sns:Publish
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableJobsName}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableGlobalName}
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaLandingName}
                  - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopicName}

  StateMachineTriggerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref StateMachineTriggerRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StateMachineTriggerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StateMachineName}'

  SnsSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: 'email'
      Endpoint: !Ref Email
      TopicArn: !Ref AcademySNSTopic

  AcademyLambdaLanding:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaLandingName
      Handler: index.lambda_handler
      Role: !GetAtt LambdaLandingRole.Arn
      Code:
        S3Bucket: !Ref S3BucketScripts
        S3Key: !Sub "lambda_${LambdaLandingUploadUNIXT}.zip"
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 900
      Layers:
        - arn:aws:lambda:eu-central-1:336392948345:layer:AWSSDKPandas-Python312:12
      Environment:
        Variables:
          S3BucketData: !Ref S3BucketData
          S3BucketScripts: !Ref S3BucketScripts
          DynamoDBTableGlobalName: !Ref DynamoDBTableGlobalName
          DynamoDBTableJobsName: !Ref DynamoDBTableJobsName
          Deployment: !Ref LambdaLandingUploadUNIXT
      Tags:
        - Key: Owner
          Value: !Ref Owner

  AcademyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Ref StateMachineName
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "StartAt": "Scan",
          "States": {
            "Scan": {
              "Type": "Task",
              "Parameters": {
                "TableName": "${DynamoDBTableJobsName}"
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
              "Next": "Map",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "NotifyFailure"
                }
              ]
            },
            "Map": {
              "Type": "Map",
              "ItemsPath": "$.Items",
              "Iterator": {
                "StartAt": "AcademyLambdaLanding",
                "States": {
                  "AcademyLambdaLanding": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "OutputPath": "$.Payload",
                    "Parameters": {
                      "Payload.$": "$",
                      "FunctionName": "${LambdaLandingName}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2
                      }
                    ],
                    "End": true
                  }
                }
              },
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "NotifyFailure"
                }
              ],
              "End": true
            },
            "NotifyFailure": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${AcademySNSTopic}",
                "Message": "State machine execution failed."
              },
              "End": true
            }
          }
        }

  AcademyStateMachineTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${StateMachineName}-Trigger
      ScheduleExpression: cron(0 4 * * ? *)
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt AcademyStateMachine.Arn
          RoleArn: !GetAtt StateMachineTriggerRole.Arn
          Id: "FmaricStateMachineTriggerTarget"

Outputs:
  LambdaFunction:
    Value: !Ref AcademyLambdaLanding
  StateMachine:
    Value: !Ref AcademyStateMachine
  SNSTopicArn:
    Description: ARN of the SNS Topic
    Value: !Ref AcademySNSTopic

    