import json
import boto3
from datetime import datetime
import requests

partitions_url = "https://xtpc22s81a.execute-api.eu-central-1.amazonaws.com/v1/imdb/partitions"
specific_item_url = "https://xtpc22s81a.execute-api.eu-central-1.amazonaws.com/v1/imdb/dataset"
dynamodb = boto3.resource('dynamodb')
s3_client = boto3.client('s3')
bucket_name = "kzivkovic-academy-aws"
table_name_globals = 'kzivkovic-academy-global'
table_name_jobs = 'kzivkovic-academy-jobs'
dt_format = "%Y%m%dT%H%M%S.%f"

def lambda_handler(event, context):
    
    primary_key_globals = {
        'name': 'imdb-rest-api'
    }
    
    table_global = dynamodb.Table(table_name_globals)
    table_jobs = dynamodb.Table(table_name_jobs)
        
   
    response = table_global.get_item(Key=primary_key_globals)
    jobs = response["Item"]["jobs"]

    joined_string = ''.join(jobs)

    normalized_string = joined_string.replace('\\"', '"')
    normal_list = json.loads(normalized_string)
    
    
    documents = []
    for item in normal_list:
        primary_key_jobs = {
            "table_name": item 
            }
        job_row = table_jobs.get_item(Key=primary_key_jobs)
        documents.append(job_row)
   
    for index, item in enumerate(documents):
        table_name = item["Item"]["table_name"]
        response = requests.get(partitions_url + "/" + table_name)
        data_partitions = response.json()
        latest_date = datetime.strptime(data_partitions[0], dt_format)
       
        for doc in data_partitions:
            dt1 = datetime.strptime(doc, dt_format) 
        
            if dt1 > latest_date:
                latest_date = dt1
                
            url = f"{specific_item_url}/{table_name}?min_ingestion_dttm={doc}"
            s3_path = f'imdb/landing/{table_name}/{doc}.json'
            response_data = requests.get(url)
            data = response_data.json()
            print(type(data))
            s3_client.put_object(
                Bucket=bucket_name,
                Key=s3_path,
                Body= json.dump(data),
                ContentType='application/json'
            )
        if index > 1:
            break
        
            
        # temp = "min_ingestion_dttm: " + str(latest_date)
        # table_jobs.update_item(
        #   TableName=table_name_jobs,
        #   Key={"table_name": table_name},
        #     AttributeUpdates={
        #         "params": {
        #             "Value": temp
        #         }
        #     }
        # )
       
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
